<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/IMAAdsRenderingSettings.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/IMAAdsRenderingSettings</TokenIdentifier>
			<Abstract type="html">Set of properties that influence how ads are rendered.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
            
			
			<NodeRef refid="15"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/setMimeTypes:</TokenIdentifier>
			<Abstract type="html">If specified, the SDK will prioritize the media with MIME type on the list.
List of strings specifying the MIME types. When nil or empty, the SDK will
use it&apos;s default list of MIME types supported on iOS.
Example: @[ @&quot;video/mp4&quot;, @&quot;application/x-mpegURL&quot; ]
The property is an empty array by default.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *mimeTypes</Declaration>
			
			
			<Anchor>//api/name/mimeTypes</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/mimeTypes</TokenIdentifier>
			<Abstract type="html">If specified, the SDK will prioritize the media with MIME type on the list.
List of strings specifying the MIME types. When nil or empty, the SDK will
use it&apos;s default list of MIME types supported on iOS.
Example: @[ @&quot;video/mp4&quot;, @&quot;application/x-mpegURL&quot; ]
The property is an empty array by default.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *mimeTypes</Declaration>
			
			
			<Anchor>//api/name/mimeTypes</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/IMAAdsRenderingSettings/mimeTypes</TokenIdentifier>
			<Abstract type="html">If specified, the SDK will prioritize the media with MIME type on the list.
List of strings specifying the MIME types. When nil or empty, the SDK will
use it&apos;s default list of MIME types supported on iOS.
Example: @[ @&quot;video/mp4&quot;, @&quot;application/x-mpegURL&quot; ]
The property is an empty array by default.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *mimeTypes</Declaration>
			
			
			<Anchor>//api/name/mimeTypes</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/setBitrate:</TokenIdentifier>
			<Abstract type="html">Maximum recommended bitrate. The value is in kbit/s.
SDK will pick media with bitrate below the specified max, or the closest
bitrate if there is no media with smaller bitrate found.
Default value, |kIMAAutodetectBitrate|, means the bitrate will be selected
by the SDK, using the currently detected network speed (cellular or Wi-Fi).</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int bitrate</Declaration>
			
			
			<Anchor>//api/name/bitrate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/bitrate</TokenIdentifier>
			<Abstract type="html">Maximum recommended bitrate. The value is in kbit/s.
SDK will pick media with bitrate below the specified max, or the closest
bitrate if there is no media with smaller bitrate found.
Default value, |kIMAAutodetectBitrate|, means the bitrate will be selected
by the SDK, using the currently detected network speed (cellular or Wi-Fi).</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int bitrate</Declaration>
			
			
			<Anchor>//api/name/bitrate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/IMAAdsRenderingSettings/bitrate</TokenIdentifier>
			<Abstract type="html">Maximum recommended bitrate. The value is in kbit/s.
SDK will pick media with bitrate below the specified max, or the closest
bitrate if there is no media with smaller bitrate found.
Default value, |kIMAAutodetectBitrate|, means the bitrate will be selected
by the SDK, using the currently detected network speed (cellular or Wi-Fi).</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) int bitrate</Declaration>
			
			
			<Anchor>//api/name/bitrate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/setUiElements:</TokenIdentifier>
			<Abstract type="html">Specifies the list of UI elements that should be visible.
This property may be ignored for AdSense/AdX ads.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *uiElements</Declaration>
			
			
			<Anchor>//api/name/uiElements</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/uiElements</TokenIdentifier>
			<Abstract type="html">Specifies the list of UI elements that should be visible.
This property may be ignored for AdSense/AdX ads.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *uiElements</Declaration>
			
			
			<Anchor>//api/name/uiElements</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/IMAAdsRenderingSettings/uiElements</TokenIdentifier>
			<Abstract type="html">Specifies the list of UI elements that should be visible.
This property may be ignored for AdSense/AdX ads.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray *uiElements</Declaration>
			
			
			<Anchor>//api/name/uiElements</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/setWebOpenerPresentingController:</TokenIdentifier>
			<Abstract type="html">Specifies the optional UIViewController that will be used to present an
in-app browser.
When nil, tapping the video ad &quot;Learn More&quot; button or companion ads
will result in opening Safari browser. If provided, in-app browser will
be used, allowing the user to stay in the app and return easily.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIViewController *webOpenerPresentingController</Declaration>
			
			
			<Anchor>//api/name/webOpenerPresentingController</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/webOpenerPresentingController</TokenIdentifier>
			<Abstract type="html">Specifies the optional UIViewController that will be used to present an
in-app browser.
When nil, tapping the video ad &quot;Learn More&quot; button or companion ads
will result in opening Safari browser. If provided, in-app browser will
be used, allowing the user to stay in the app and return easily.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIViewController *webOpenerPresentingController</Declaration>
			
			
			<Anchor>//api/name/webOpenerPresentingController</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/IMAAdsRenderingSettings/webOpenerPresentingController</TokenIdentifier>
			<Abstract type="html">Specifies the optional UIViewController that will be used to present an
in-app browser.
When nil, tapping the video ad &quot;Learn More&quot; button or companion ads
will result in opening Safari browser. If provided, in-app browser will
be used, allowing the user to stay in the app and return easily.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) UIViewController *webOpenerPresentingController</Declaration>
			
			
			<Anchor>//api/name/webOpenerPresentingController</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/setWebOpenerDelegate:</TokenIdentifier>
			<Abstract type="html">Delegate to be notified when in-app or external browser opens/closes.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;IMAWebOpenerDelegate&gt; webOpenerDelegate</Declaration>
			
			
			<Anchor>//api/name/webOpenerDelegate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/IMAAdsRenderingSettings/webOpenerDelegate</TokenIdentifier>
			<Abstract type="html">Delegate to be notified when in-app or external browser opens/closes.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;IMAWebOpenerDelegate&gt; webOpenerDelegate</Declaration>
			
			
			<Anchor>//api/name/webOpenerDelegate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/IMAAdsRenderingSettings/webOpenerDelegate</TokenIdentifier>
			<Abstract type="html">Delegate to be notified when in-app or external browser opens/closes.</Abstract>
			<DeclaredIn>IMAAdsRenderingSettings.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, weak) id&lt;IMAWebOpenerDelegate&gt; webOpenerDelegate</Declaration>
			
			
			<Anchor>//api/name/webOpenerDelegate</Anchor>
            <NodeRef refid="15"/>
		</Token>
		
        
        
	</File>
</Tokens>